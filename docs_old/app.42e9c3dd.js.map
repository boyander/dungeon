{"version":3,"sources":["public/assets/maps/dungeonMaps.js","src/actors/GameMaster.js","src/effects/DrawManager.js","src/actors/Map.js","src/actors/Chest.js","src/actors/ChestManager.js","src/actors/Hero.js","src/actors/HeroManager.js","src/actors/Skeleton.js","src/actors/FPSViewer.js","src/actors/Chronometer.js","src/actors/UpperMessage.js","src/app.js"],"names":["dungeonMap","LVL","heroSpeed","heroNumber","myDungeonMap","viewField","GameMaster","level","skeletonPosition","allChestsOpen","isSkeletonDead","debug","deltaSeconds","key","delta","ctx","myGameMaster","PICTURES","rock","sheet","pos","x","y","size","dest","offset","water","fire","closedChest","openChest","wall","floor","torch","frames","loadSpriteSheet","url","img","Image","src","SPRITESHEETS","dungeon","require","DrawManager","render_torch_time","objectName","objectToDraw","Error","position","animationOffset","getDrawElements","Math","getObject","drawFrame","drawImage","half","headerPositionBase","typeOffset","drawHalf","myDrawManager","Map","tileSize","rows","trim","split","map","row","i","length","j","editedTilePos","element","availablePositions","push","tilePos","tileIndex","tile","error","direction","posToTile","facing","tileAtIndex","drawWall","random","cell","drawTorch","drawFloor","myMap","Chest","value","num","isChestOpen","headerPosition","getDrawHeaders","ChestManager","chests","chestStartOptions","latestOpenedChest","chestInfo","getRandomLocations","every","e","myChestManager","linkIMG","POS","currentSequence","speedX","speedY","Hero","heroSize","spritesheet","sequences","name","numFrames","ySeqPos","framePos","time","speed","hypoDirections","abailablesDirections","current_direction","stop","frameSize","seqName","seq","find","s","killSkeleton","setDirection","getMove","tip","filter","getAbailablesDirections","findIndex","nextTile","newPosX","newPosY","sqrt","pow","HeroManager","heroes","heroStartOptions","myHeroManager","skeletonIMG","Skeleton","skeletonSize","drawShadow","checkChestsStatus","getDirection","open","forEach","ori","distance","canvas","document","getElementById","maskCanvas","width","height","maskCtx","getContext","fillStyle","fillRect","globalCompositeOperation","arc","PI","fill","FPSViewer","fps","toFixed","font","fillText","Chronometer","seg","min","currentTimer","UpperMessage","window","onload","setHeroes","initialPos","GetDungeonStart","actors","lastFrame","requestAnimationFrame","render","actor","update","clearRect","sort","a","b","draw","body","addEventListener","keyboardEvent","keyboardEventUp"],"mappings":"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","file":"app.42e9c3dd.js","sourceRoot":"..","sourcesContent":["export const dungeonMap = {\n  1: `\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nW............WW............W\nW.WWWW.iWWWi.WW.iWWWi.WWWW.W\nW.WWWW.WWWWW.WW.WWWWW.WWWW.W\nW.WWWW.WWWWW.ii.WWWWW.WWWW.W\nW..........................W\nW.WWWW.WW.WWWWWWWW.WW.WWWW.W\nW.WWWW.WW.WWWWWWWW.WW.WWWW.W\nW......WW....WW....WW......W\nW.iWWi.WWWWi.WW.iWWWW.iWWi.W\nW.WWWW.WWWWW.WW.WWWWW.WWWW.W\nW.WWWW.WW..........WW.WWWW.W\nW.WWWW.WW.iWWWWWWi.WW.WWWW.W\nW.iWWi.WW.WeeeeeeW.WW.iWWi.W\nW.........WeeSeeeW.........W\nW.WWWW.WW.WeeeeeeW.WW.WWWW.W\nW.WWWW.WW.WWieeiWW.WW.WWWW.W\nW.WWWW.WW..........WW.WWWW.W\nW.WWWW.WW.WWWWWWWW.WW.WWWW.W\nW.WWWW.WW.WWWWWWWW.WW.WWWW.W\nW............WW............W\nW.iWWi.WWWWW.WW.WWWWW.iWWi.W\nW.WWWW.WWWWW.WW.WWWWW.WWWW.W\nW...WW................WW...W\nWWW.WW.WW.iWWWWWWi.WW.WW.WWW\nWWW.WW.WW.WWWWWWWW.WW.WW.WWW\nW......WW....WW....WW......W\nW.iWWWWWWWWW.WW.WWWWWWWWWi.W\nW.WWWWWWWWWW.WW.WWWWWWWWWW.W\nW..........................W\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n`,\n  2: `\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nW......WW....WW....WW......W\nW.iWWi.WW.Wi.WW.iW.WW.iWWi.W\nW.WWWW.WW.WW.WW.WW.WW.WWWW.W\nW.iWWi.WW.WW.ii.WW.WW.iWWi.W\nW......WW..........WW......W\nWWWWWW.WW.iWWWWWWi.WW.WWWWWW\nWWWWWW.WW.WWWWWWWW.WW.WWWWWW\nW......WW....WW....WW......W\nWWWWWi.WWWWi.WW.iWWWW.iWWWWW\nWWWWWi.WWWWW.WW.WWWWW.iWWWWW\nW......WW..........WW......W\nW.iWWi.WW.iWWeeWWi.WW.iWWi.W\nW.WWWW.WW.WeeeeeeW.WW.WWWW.W\nW.WWWW....eeeSeeee....WWWW.W\nW.WWWWWWi.WeeeeeeW.iWWWWWW.W\nW.iWWWWWW.WWieeiWW.WWWWWWi.W\nW......WW..........WW......W\nW.WWWW.WW.WWWWWWWW.WW.WWWWWW\nW.WWWW.WW.WWWWWWWW.WW.WWWWWW\nW............WW............W\nW.iWWi.WWWWW.WW.WWWWW.iWWi.W\nW.WWWW.WWWWW.WW.WWWWW.WWWW.W\nW...WW.......WW.......WW...W\nWWi.WWWWi.iWWWWWWi.iWWWW.iWW\nWWi.WWWWi.iWWWWWWi.iWWWW.iWW\nW............WW............W\nW.iWWWWWWWWi.WW.iWWWWWWWWi.W\nW.iWWWWWWWWi.WW.iWWWWWWWWi.W\nW............WW............W\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\n`,\n  3: `\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWWWW\ni......ii....ii....ii......i\ni.iiii.ii.ii.ii.ii.ii.iiii.i\ni.iiii.ii.ii.ii.ii.ii.iiii.i\ni.iiii.ii.ii.ii.ii.ii.iiii.i\ni......ii..........ii......i\ni.iiiiiii.iiiiiiii.iiiiiii.i\ni.iiiiiii.iiiiiiii.iiiiiii.i\ni......ii....ii....ii......i\niiiiii.iiiii.ii.iiiii.iiiiii\niiiiii.iiiii.ii.iiiii.iiiiii\ni......ii....ii....ii......i\ni.iiii.ii.iiiiiiii.ii.iiii.i\ni.iiii.ii.ieeeeeei.ii.iiii.i\ni......ii.eeeSeeee.ii......i\ni.iiiiiii.ieeeeeei.iiiiiii.i\ni.iiiiiii.iiiiiiii.iiiiiii.i\ni......ii....ii....ii......i\ni.iiii.ii.iiiiiiii.ii.iiiiii\ni.iiii.ii.iiiiiiii.ii.iiiiii\ni............ii............i\ni.iiii.iiiii.ii.iiiii.iiii.i\ni.iiii.iiiii.ii.iiiii.iiii.i\ni...ii.......ii.......ii...i\niii.iiiii.iiiiiiii.iiiii.iii\niii.iiiii.iiiiiiii.iiiii.iii\ni............ii............i\ni.iiiiiiiiii.ii.iiiiiiiiii.i\ni.iiiiiiiiii.ii.iiiiiiiiii.i\ni............ii............i\niiiiiiiiiiiiiiiiiiiiiiiiiiii\n`,\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { dungeonMap } from \"../../public/assets/maps/dungeonMaps\";\n\nconst LVL = {\n  1: {\n    heroSpeed: 50,\n    heroNumber: 4,\n    myDungeonMap: dungeonMap[1],\n    viewField: 250,\n  },\n  2: {\n    heroSpeed: 70,\n    heroNumber: 6,\n    myDungeonMap: dungeonMap[2],\n    viewField: 200,\n  },\n  3: {\n    heroSpeed: 80,\n    heroNumber: 8,\n    myDungeonMap: dungeonMap[3],\n    viewField: 150,\n  },\n};\n\nclass GameMaster {\n  constructor() {\n    this.level = 1;\n\n    // GAME SETTINGS\n    this.heroSpeed = LVL[this.level].heroSpeed;\n    this.heroNumber = LVL[this.level].heroNumber;\n    this.myDungeonMap = LVL[this.level].myDungeonMap;\n    this.viewField = LVL[this.level].viewField;\n\n    // GAME STATUS\n    this.skeletonPosition = {};\n    this.allChestsOpen = false;\n    this.isSkeletonDead = false;\n\n    this.debug = false;\n    return this;\n  }\n\n  update(deltaSeconds) {}\n\n  keyboardEvent(key) {}\n\n  draw(delta, ctx) {}\n}\n\nexport const myGameMaster = new GameMaster();\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nconst PICTURES = {\n  rock: {\n    sheet: \"dungeon\",\n    pos: { x: 0, y: 207 },\n    size: { x: 18, y: 16 },\n    dest: { x: 40, y: 30 },\n    offset: { x: 0, y: 0 },\n  },\n  water: {\n    sheet: \"dungeon\",\n    pos: { x: 16, y: 207 },\n    size: { x: 18, y: 16 },\n    dest: { x: 40, y: 30 },\n    offset: { x: 0, y: 0 },\n  },\n  fire: {\n    sheet: \"dungeon\",\n    pos: { x: 32, y: 207 },\n    size: { x: 18, y: 16 },\n    dest: { x: 40, y: 30 },\n    offset: { x: 0, y: 0 },\n  },\n  closedChest: {\n    sheet: \"dungeon\",\n    pos: { x: 240, y: 174 },\n    size: { x: 30, y: 18 },\n    dest: { x: 45, y: 30 },\n    offset: { x: 0, y: 8 },\n  },\n  openChest: {\n    sheet: \"dungeon\",\n    pos: { x: 240, y: 208 },\n    size: { x: 30, y: 18 },\n    dest: { x: 45, y: 30 },\n    offset: { x: 0, y: 8 },\n  },\n  wall: {\n    sheet: \"dungeon\",\n    pos: { x: 0, y: 16 },\n    size: { x: 20, y: 18 },\n    dest: { x: 30, y: 30 },\n    offset: { x: 0, y: 0 },\n  },\n  floor: {\n    sheet: \"dungeon\",\n    pos: { x: 64, y: 96 },\n    size: { x: 20, y: 18 },\n    dest: { x: 30, y: 30 },\n    offset: { x: 0, y: 0 },\n  },\n  torch: {\n    sheet: \"dungeon\",\n    frames: 8,\n    pos: { x: 132, y: 153 },\n    size: { x: 16, y: 13 },\n    dest: { x: 26, y: 23 },\n    offset: { x: -5, y: 8 },\n  },\n};\n\nconst loadSpriteSheet = (url) => {\n  const img = new Image();\n  img.src = url;\n  return img;\n};\n\nconst SPRITESHEETS = {\n  dungeon: loadSpriteSheet(require(\"../../public/images/dungeonStuffs4.png\")),\n};\n\nclass DrawManager {\n  constructor() {\n    this.render_torch_time = 0;\n  }\n\n  getObject(objectName) {\n    const objectToDraw = PICTURES[objectName];\n    if (objectToDraw) {\n      return objectToDraw;\n    }\n    throw new Error(`No object to draw with name ${objectName}`);\n  }\n\n  getDrawElements(ctx, objectName, position, delta = 0, animationOffset = 0) {\n    this.render_torch_time += delta;\n    const getDrawElements = Math.floor(\n      this.render_torch_time + animationOffset / 8\n    );\n    const { pos, size, dest, frames, offset } = this.getObject(objectName);\n    const drawFrame = frames ? getDrawElements % frames : 0;\n    // ctx.globalAlpha = 1;\n    ctx.drawImage(\n      SPRITESHEETS.dungeon,\n      pos.x + size.x * drawFrame,\n      pos.y,\n      size.x,\n      size.y,\n      position.x - offset.x,\n      position.y - offset.y,\n      dest.x,\n      dest.y\n    );\n  }\n\n  drawHalf(ctx, objectName, position, half = false) {\n    const { pos, size, dest, offset } = this.getObject(objectName);\n    // void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    ctx.drawImage(\n      SPRITESHEETS.dungeon,\n      half ? pos.x + size.x / 2 : pos.x,\n      pos.y - size.y,\n      size.x / 2,\n      size.y,\n      half ? position.x + 48 - offset.x : position.x + 20 - offset.x,\n      position.y - 8,\n      dest.x - 12,\n      dest.y\n    );\n  }\n\n  getDrawHeaders(ctx, objectName, half) {\n    const headerPositionBase = { x: 450, y: 10 };\n    const typeOffset = {\n      rock: { x: 0, y: 0 },\n      fire: { x: 50, y: 0 },\n      water: { x: 100, y: 0 },\n    };\n    this.drawHalf(\n      ctx,\n      objectName,\n      {\n        x: headerPositionBase.x + typeOffset[objectName].x,\n        y: headerPositionBase.y + typeOffset[objectName].y,\n      },\n      half\n    );\n  }\n}\nexport const myDrawManager = new DrawManager();\n","/* eslint-disable no-unused-expressions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { myDrawManager } from \"../effects/DrawManager\";\nimport { myGameMaster } from \"./GameMaster\";\n\nclass Map {\n  constructor(tileSize = 23) {\n    this.position = { x: 0, y: 0 };\n    this.tileSize = tileSize;\n    this.level = myGameMaster.level;\n    const rows = myGameMaster.myDungeonMap.trim().split(\"\\n\");\n    this.map = rows.map((row) => row.split(\"\"));\n    return this;\n  }\n\n  GetDungeonStart() {\n    for (let i = 0; i < this.map.length; i += 1) {\n      for (let j = 0; j < this.map[i].length; j += 1) {\n        if (this.map[i][j] === \"S\") {\n          return this.editedTilePos(i, j);\n        }\n      }\n    }\n    throw new Error(\"Set the S for skeleton start\");\n  }\n\n  getRandomLocations(element) {\n    const availablePositions = [];\n    for (let i = 0; i < this.map.length; i += 1) {\n      for (let j = 0; j < this.map[i].length; j += 1) {\n        if (this.map[i][j] === \".\") {\n          element === \"chest\"\n            ? availablePositions.push(this.tilePos(i, j))\n            : availablePositions.push(this.editedTilePos(i, j));\n        }\n      }\n    }\n    return availablePositions;\n  }\n\n  posToTile(position) {\n    const i = Math.floor((position.x - this.position.x) / this.tileSize);\n    const j = Math.floor((position.y - this.position.y) / this.tileSize);\n    return [j, i];\n  }\n\n  tileAtIndex(tileIndex) {\n    try {\n      const tile = this.map[tileIndex[0]][tileIndex[1]];\n      return tile;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  tile(position, direction) {\n    const tileIndex = this.posToTile(position);\n    const facing = [tileIndex[0] + direction[1], tileIndex[1] + direction[0]];\n    const tile = this.tileAtIndex(facing);\n    return tile;\n  }\n\n  tilePos(i, j) {\n    return {\n      x: this.position.x + j * this.tileSize,\n      y: this.position.y + i * this.tileSize,\n    };\n  }\n\n  editedTilePos(i, j) {\n    return {\n      x: this.position.x + this.tileSize * j + this.tileSize / 2,\n      y: this.position.y + this.tileSize * i + this.tileSize / 2,\n    };\n  }\n\n  drawWall(ctx, i, j) {\n    myDrawManager.getDrawElements(ctx, \"wall\", this.tilePos(i, j));\n  }\n\n  drawFloor(ctx, i, j) {\n    myDrawManager.getDrawElements(ctx, \"floor\", this.tilePos(i, j));\n  }\n\n  drawTorch(delta, ctx, i, j) {\n    this.drawWall(ctx, i, j);\n    const animationOffset = Math.floor(Math.random() * 8);\n    myDrawManager.getDrawElements(\n      ctx,\n      \"torch\",\n      this.tilePos(i, j),\n      delta,\n      animationOffset\n    );\n  }\n\n  keyboardEvent() {}\n\n  update() {  }\n\n  draw(delta, ctx) {\n    for (let i = 0; i < this.map.length; i += 1) {\n      for (let j = 0; j < this.map[i].length; j += 1) {\n        const cell = this.map[i][j];\n        if (cell === \"W\") this.drawWall(ctx, i, j);\n        if (cell === \"i\") this.drawTorch(delta, ctx, i, j);\n        if (cell === \".\" || cell === \"S\" || cell === \"e\")\n          this.drawFloor(ctx, i, j);\n      }\n    }\n  }\n}\nexport const myMap = new Map();\n\n// export const getCurrentMap = () => {\n//   const newMap = new Map();\n//   console.log(\"currentMapLevel\", newMap.level);\n//   return newMap;\n// };\n","import { myDrawManager } from \"../effects/DrawManager\";\nimport { myGameMaster } from \"./GameMaster\";\n\nexport class Chest {\n  constructor(position, value, num, isChestOpen) {\n    this.position = { x: position.x, y: position.y };\n    this.headerPosition = { x: 10, y: 10 };\n    this.value = value;\n    this.num = num;\n    this.isChestOpen = isChestOpen;\n  }\n\n  draw(delta, ctx) {\n    // if (myGameMaster.start) {}\n    if (this.isChestOpen || myGameMaster.debug) {\n      myDrawManager.getDrawElements(ctx, \"openChest\", this.position, delta);\n      switch (this.value) {\n        case \"AA\":\n          myDrawManager.getDrawElements(ctx, \"rock\", this.position, delta);\n          myDrawManager.getDrawHeaders(ctx, \"rock\", this.num);\n          break;\n        case \"BB\":\n          myDrawManager.getDrawElements(ctx, \"water\", this.position, delta);\n          myDrawManager.getDrawHeaders(ctx, \"water\", this.num);\n          break;\n        case \"CC\":\n          myDrawManager.getDrawElements(ctx, \"fire\", this.position, delta);\n          myDrawManager.getDrawHeaders(ctx, \"fire\", this.num);\n          break;\n        default:\n          break;\n      }\n    } else {\n      myDrawManager.getDrawElements(ctx, \"closedChest\", this.position);\n    }\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { myGameMaster } from \"./GameMaster\";\nimport { myMap } from \"./Map\";\nimport { Chest } from \"./Chest\";\n\nclass ChestManager {\n  constructor() {\n    this.chests = [\n      // position,ID,num,head,color\n      new Chest(this.chestStartOptions(), \"AA\", 0, false),\n      new Chest(this.chestStartOptions(), \"AA\", 1, false),\n      new Chest(this.chestStartOptions(), \"BB\", 0, false),\n      new Chest(this.chestStartOptions(), \"BB\", 1, false),\n      new Chest(this.chestStartOptions(), \"CC\", 0, false),\n      new Chest(this.chestStartOptions(), \"CC\", 1, false),\n    ];\n    this.latestOpenedChest = \"\";\n    this.chestInfo = [];\n    return this;\n  }\n\n  update(deltaSeconds) { }\n\n  keyboardEvent(key) { }\n\n  draw(delta, ctx) { }\n\n  chestStartOptions() {\n    let availablePositions = [];\n    availablePositions = myMap.getRandomLocations(\"chest\");\n    let random = 0;\n    random = Math.floor(Math.random() * availablePositions.length);\n    return availablePositions[random];\n  }\n\n  checkChestsStatus() {\n    myGameMaster.allChestsOpen = this.chests.every((e) => e.isChestOpen === true);\n  }\n}\nexport const myChestManager = new ChestManager();\n","/* eslint-disable no-restricted-properties */\nimport { myGameMaster } from \"./GameMaster\";\n\nconst linkIMG = require(\"../../public/images/link.png\");\n\nconst POS = {\n  0: {\n    currentSequence: \"right\",\n    speedX: myGameMaster.heroSpeed,\n    speedY: 0,\n  },\n  1: {\n    currentSequence: \"left\",\n    speedX: -myGameMaster.heroSpeed,\n    speedY: 0,\n  },\n  2: {\n    currentSequence: \"up\",\n    speedX: 0,\n    speedY: -myGameMaster.heroSpeed,\n  },\n  3: {\n    currentSequence: \"down\",\n    speedX: 0,\n    speedY: myGameMaster.heroSpeed,\n  },\n};\n\nexport class Hero {\n  constructor(position, map) {\n    this.position = { x: position.x, y: position.y };\n    this.heroSize = 10;\n\n    this.spritesheet = new Image();\n    this.spritesheet.src = linkIMG;\n    this.sequences = [\n      { name: \"still-down\", numFrames: 1, ySeqPos: 0 },\n      { name: \"still-left\", numFrames: 1, ySeqPos: 1 },\n      { name: \"still-up\", numFrames: 1, ySeqPos: 2 },\n      { name: \"still-right\", numFrames: 1, ySeqPos: 3 },\n      { name: \"moving-down\", numFrames: 10, ySeqPos: 4 },\n      { name: \"moving-left\", numFrames: 10, ySeqPos: 5 },\n      { name: \"moving-up\", numFrames: 10, ySeqPos: 6 },\n      { name: \"moving-right\", numFrames: 10, ySeqPos: 7 },\n    ];\n\n    this.framePos = 0;\n    this.time = 0;\n    this.currentSequence = \"down\";\n    this.speed = { x: 0, y: 0 };\n\n    this.hypoDirections = [\n      [1, 0],\n      [-1, 0],\n      [0, -1],\n      [0, 1],\n    ];\n    this.abailablesDirections = [];\n    this.current_direction = [];\n    this.stop = true;\n\n    this.map = map;\n  }\n\n  draw(delta, ctx) {\n    // if (myGameMaster.start) {}\n    const frameSize = { x: 120, y: 130 };\n    const seqName =\n      this.speed.x === 0 && this.speed.y === 0\n        ? `still-${this.currentSequence}`\n        : `moving-${this.currentSequence}`;\n    const seq = this.sequences.find((s) => s.name === seqName);\n    if (!seq) throw new Error(\"invalid seq\");\n\n    // void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    ctx.drawImage(\n      this.spritesheet,\n      frameSize.x * this.framePos,\n      frameSize.y * seq.ySeqPos,\n      frameSize.x,\n      frameSize.y,\n      this.position.x - 12,\n      this.position.y - 23,\n      frameSize.x - 95,\n      frameSize.y - 95,\n    );\n\n    // ctx.beginPath();\n    // ctx.arc(this.position.x, this.position.y, 3, 0, 2 * Math.PI);\n    // ctx.closePath();\n    // ctx.fill();\n\n    this.time += delta;\n    if (seq.numFrames === 1) {\n      this.framePos = Math.floor(this.time * 3) % seq.numFrames;\n    } else {\n      this.framePos = Math.floor(this.time * 10) % seq.numFrames;\n    }\n\n    this.killSkeleton();\n  }\n\n  update(deltaSeconds) {\n    if (myGameMaster.allChestsOpen) {\n      this.currentSequence = \"down\";\n      this.speed = { x: 0, y: 0 };\n    } else {\n      if (this.current_direction.length < 1) {\n        this.setDirection();\n      }\n      this.getMove(deltaSeconds);\n    }\n  }\n\n  getAbailablesDirections() {\n    let tip = {};\n    const abailablesDirections = this.hypoDirections;\n    return abailablesDirections.filter((e, i) => {\n      tip = {\n        x: this.position.x - abailablesDirections[i][0] * this.heroSize,\n        y: this.position.y - abailablesDirections[i][1] * this.heroSize,\n      };\n      const tile = this.map.tile(tip, abailablesDirections[i]);\n      if (tile !== \"W\" && tile !== \"i\") {\n        return abailablesDirections[i];\n      }\n    });\n  }\n\n  setDirection() {\n    this.abailablesDirections = this.getAbailablesDirections();\n    let random = 0;\n    random = Math.floor(Math.random() * this.abailablesDirections.length);\n    this.current_direction = this.abailablesDirections[random];\n  }\n\n  getMove(deltaSeconds) {\n    const currentDir = (e) => e === this.current_direction;\n    const objectToDraw = POS[this.hypoDirections.findIndex(currentDir)];\n\n    const { currentSequence, speedX, speedY } = objectToDraw;\n\n    this.currentSequence = currentSequence;\n    this.speed.x = speedX;\n    this.speed.y = speedY;\n    this.nextTile(deltaSeconds);\n  }\n\n  nextTile(deltaSeconds) {\n    const newPosX = this.position.x + this.speed.x * deltaSeconds;\n    const newPosY = this.position.y + this.speed.y * deltaSeconds;\n\n    const direction = this.current_direction;\n    const tip = {\n      x: this.position.x - direction[0] * this.heroSize,\n      y: this.position.y - direction[1] * this.heroSize,\n    };\n    const tile = this.map.tile(tip, direction);\n    if (tile !== \"W\" && tile !== \"i\") {\n      this.position.x = newPosX;\n      this.position.y = newPosY;\n    } else {\n      this.current_direction = [];\n    }\n  }\n\n  killSkeleton() {\n    let distance = 0;\n    distance = Math.sqrt(\n      Math.pow(this.position.x - myGameMaster.skeletonPosition.x, 2)\n      + Math.pow(this.position.y - myGameMaster.skeletonPosition.y, 2),\n    );\n    if (distance < 15) {\n      myGameMaster.isSkeletonDead = true;\n    }\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { myGameMaster } from \"./GameMaster\";\nimport { myMap } from \"./Map\";\nimport { Hero } from \"./Hero\";\n\nclass HeroManager {\n  constructor() {\n    this.heroes = [];\n    return this;\n  }\n\n  update(deltaSeconds) {}\n\n  keyboardEvent(key) {}\n\n  draw(delta, ctx) {}\n\n  setHeroes() {\n    for (let i = 0; i < myGameMaster.heroNumber; i += 1) {\n      this.heroes.push(new Hero(this.heroStartOptions(), myMap));\n    }\n  }\n\n  heroStartOptions() {\n    let availablePositions = [];\n    availablePositions = myMap.getRandomLocations(\"hero\");\n    let random = 0;\n    random = Math.floor(Math.random() * availablePositions.length);\n    return availablePositions[random];\n  }\n}\nexport const myHeroManager = new HeroManager();\n","import { myGameMaster } from \"./GameMaster\";\nimport { myChestManager } from \"./ChestManager\";\n// import { am } from \"../effects/AudioManager.js\";\n\nconst skeletonIMG = require(\"../../public/images/skeleton.png\");\n\nexport class Skeleton {\n  constructor(position, map) {\n    this.position = { x: position.x, y: position.y };\n    this.skeletonSize = 10;\n\n    this.spritesheet = new Image();\n    this.spritesheet.src = skeletonIMG;\n    this.sequences = [\n      { name: \"still-down\", numFrames: 2, ySeqPos: 2 },\n      { name: \"still-left\", numFrames: 2, ySeqPos: 1 },\n      { name: \"still-up\", numFrames: 2, ySeqPos: 0 },\n      { name: \"still-right\", numFrames: 2, ySeqPos: 3 },\n      { name: \"still-dead\", numFrames: 1, ySeqPos: 20 },\n      { name: \"still-dance\", numFrames: 5, ySeqPos: 14 },\n      { name: \"moving-down\", numFrames: 7, ySeqPos: 10 },\n      { name: \"moving-left\", numFrames: 7, ySeqPos: 9 },\n      { name: \"moving-up\", numFrames: 7, ySeqPos: 8 },\n      { name: \"moving-right\", numFrames: 7, ySeqPos: 11 },\n    ];\n    this.framePos = 0;\n    this.time = 0;\n    this.currentSequence = \"down\";\n    this.speed = { x: 0, y: 0 };\n\n    this.map = map;\n  }\n\n  draw(delta, ctx) {\n    const frameSize = { x: 64, y: 64 };\n    const seqName =\n      this.speed.x === 0 && this.speed.y === 0\n        ? `still-${this.currentSequence}`\n        : `moving-${this.currentSequence}`;\n    const seq = this.sequences.find((s) => s.name === seqName);\n    if (!seq) throw new Error(\"invalid seq\");\n\n    this.drawShadow(ctx);\n\n    // void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    ctx.drawImage(\n      this.spritesheet,\n      frameSize.x * this.framePos,\n      frameSize.y * seq.ySeqPos,\n      frameSize.x,\n      frameSize.y,\n      this.position.x - 20,\n      this.position.y - 25,\n      frameSize.x - 25,\n      frameSize.y - 25\n    );\n\n    this.time += delta;\n    this.framePos = Math.floor(this.time * seq.numFrames) % seq.numFrames;\n\n    myGameMaster.skeletonPosition = this.position;\n    myChestManager.checkChestsStatus();\n  }\n\n  update(deltaSeconds) {\n    if (myGameMaster.isSkeletonDead && !myGameMaster.debug) {\n      this.currentSequence = \"dead\";\n      this.speed = { x: 0, y: 0 };\n      this.framePos = 5;\n    } else if (myGameMaster.allChestsOpen && this.currentSequence !== \"dance\") {\n      this.currentSequence = \"dance\";\n      this.speed = { x: 0, y: 0 };\n      this.framePos = 2;\n    } else {\n      const newPosX = this.position.x + this.speed.x * deltaSeconds;\n      const newPosY = this.position.y + this.speed.y * deltaSeconds;\n\n      const direction = this.getDirection();\n      const tip = {\n        x: this.position.x - direction[0] * this.skeletonSize,\n        y: this.position.y - direction[1] * this.skeletonSize,\n      };\n\n      const tile = this.map.tile(tip, direction);\n      if (tile !== \"W\" && tile !== \"i\") {\n        this.position.x = newPosX;\n        this.position.y = newPosY;\n      }\n    }\n  }\n\n  getDirection() {\n    // Calculate direction based on speed\n    let direction = [1, 0];\n    if (this.speed.x !== 0 && this.speed.x < 0) {\n      direction = [-1, 0];\n    }\n    if (this.speed.y !== 0 && this.speed.y > 0) {\n      direction = [0, 1];\n    }\n    if (this.speed.y !== 0 && this.speed.y < 0) {\n      direction = [0, -1];\n    }\n    return direction;\n  }\n\n  keyboardEvent(key) {\n    switch (key) {\n      case \"ArrowLeft\":\n        this.currentSequence = \"left\";\n        this.speed.x = -100;\n        break;\n      case \"ArrowRight\":\n        this.currentSequence = \"right\";\n        this.speed.x = 100;\n        break;\n      case \"ArrowUp\":\n        this.currentSequence = \"up\";\n        this.speed.y = -100;\n        break;\n      case \"ArrowDown\":\n        this.currentSequence = \"down\";\n        this.speed.y = 100;\n        break;\n      case \"a\":\n        this.open();\n        break;\n      case \"A\":\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  keyboardEventUp() {\n    this.speed.x = 0;\n    this.speed.y = 0;\n  }\n\n  open() {\n    let distance = 0;\n    myChestManager.chests.forEach((ori) => {\n      distance = 0;\n      distance = Math.sqrt(\n        Math.pow(this.position.x - ori.position.x, 2) +\n          Math.pow(this.position.y - ori.position.y, 2)\n      );\n      // console.log(myChestManager.latestOpenedChest);\n      if (distance < 30 && !ori.isChestOpen) {\n        switch (myChestManager.latestOpenedChest) {\n          case \"\":\n            ori.isChestOpen = true;\n            myChestManager.latestOpenedChest = ori.value;\n            break;\n          case ori.value:\n            ori.isChestOpen = true;\n            myChestManager.latestOpenedChest = \"\";\n            break;\n          default:\n            myChestManager.chests.forEach((e) => (e.isChestOpen = false));\n            myChestManager.latestOpenedChest = \"\";\n            ori.isChestOpen = true;\n            myChestManager.latestOpenedChest = ori.value;\n            break;\n        }\n      }\n    });\n  }\n\n  drawShadow(ctx) {\n    if (this.currentSequence === \"dance\") myGameMaster.viewField++;\n    // Create a canvas that we will use as a mask\n    const canvas = document.getElementById(\"canvas\");\n    const maskCanvas = document.getElementById(\"canvasShadow\");\n    // Ensure same dimensions\n    maskCanvas.width = canvas.width;\n    maskCanvas.height = canvas.height;\n    const maskCtx = maskCanvas.getContext(\"2d\");\n    // This color is the one of the filled shape\n    maskCtx.fillStyle = \"black\";\n    // Fill the mask\n    maskCtx.fillRect(0, 38, maskCanvas.width, maskCanvas.height);\n\n    // Set xor operation\n    maskCtx.globalCompositeOperation = \"destination-out\";\n    // Draw the shape you want to take out\n    maskCtx.arc(\n      this.position.x,\n      this.position.y,\n      myGameMaster.viewField,\n      0,\n      2 * Math.PI\n    );\n    maskCtx.fill();\n\n    // Draw mask on the image, and done !\n    ctx.drawImage(maskCanvas, 0, 0);\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nexport class FPSViewer {\n  constructor(position) {\n    this.position = position;\n  }\n\n  keyboardEvent() { }\n\n  update() { }\n\n  draw(delta, ctx) {\n    const fps = (1 / delta).toFixed(2);\n    ctx.font = \"15px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(`FPS: ${fps}`, this.position.x, this.position.y);\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { myGameMaster } from \"./GameMaster\";\n\nexport class Chronometer {\n  constructor(position) {\n    this.position = position;\n    this.seg = 0;\n    this.min = 0;\n  }\n\n  keyboardEvent() {}\n\n  update() {}\n\n  draw(delta, ctx) {\n    if (!myGameMaster.isSkeletonDead && !myGameMaster.allChestsOpen) {\n      this.seg += delta;\n    }\n\n    let seg = Math.floor(this.seg);\n    if (this.seg < 10) {\n      seg = `0${seg}`;\n    }\n    if (seg === 60) {\n      this.min += 1;\n      this.seg = 0;\n    }\n    const currentTimer = `Time: ${this.min}:${seg}`;\n\n    ctx.font = \"15px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(`${currentTimer} `, this.position.x, this.position.y);\n  }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport { myGameMaster } from \"./GameMaster\";\n\nexport class UpperMessage {\n  constructor(position) {\n    this.position = position;\n  }\n\n  keyboardEvent() {}\n\n  update() {}\n\n  draw(delta, ctx) {\n    ctx.font = \"15px Arial\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\n      \"Press 'a' to open the chests\",\n      this.position.x + 100,\n      this.position.y,\n    );\n    ctx.fillText(\n      `Level ${myGameMaster.level}`,\n      this.position.x + 300,\n      this.position.y,\n    );\n  }\n}\n","import { myChestManager } from \"./actors/ChestManager\";\nimport { myHeroManager } from \"./actors/HeroManager\";\nimport { myMap } from \"./actors/Map\";\n// import { myGameMaster } from \"./actors/GameMaster\";\n\nimport { Skeleton } from \"./actors/Skeleton\";\n\nimport { FPSViewer } from \"./actors/FPSViewer\";\nimport { Chronometer } from \"./actors/Chronometer\";\nimport { UpperMessage } from \"./actors/UpperMessage\";\n\n// import { AudioStatus } from \"./actors/AudioStatus\";\n// import { am } from \"../src/effects/AudioManager.js\";\n\nwindow.onload = () => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  // Actors\n  const map = myMap;\n  myHeroManager.setHeroes();\n  const initialPos = map.GetDungeonStart();\n\n  const fps = new FPSViewer({ x: 5, y: 15 });\n  const chrono = new Chronometer({ x: 100, y: 15 });\n  const upperMessage = new UpperMessage({ x: 100, y: 15 });\n  // const audio = new AudioStatus({ x: 250, y: 15 });\n  const skeleton = new Skeleton(initialPos, map);\n\n  const actors = [\n    map,\n    fps,\n    chrono,\n    upperMessage,\n    // audio,\n    skeleton,\n    ...myChestManager.chests,\n    ...myHeroManager.heroes,\n  ];\n\n  // GAME LOOP -> BUCLE DE RENDERIZADO Y ACTUALIZACIÓN\n  let lastFrame = 0;\n  const render = (time) => {\n    const delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n    actors.forEach((actor) => actor.update && actor.update(delta));\n    ctx.clearRect(0, 0, 650, 720);\n    actors\n      .sort((a, b) => a.position.y - b.position.y)\n      .forEach((actor) => actor.draw(delta, ctx));\n    window.requestAnimationFrame(render);\n  };\n\n  // setInterval(render, frameTime);\n  window.requestAnimationFrame(render);\n\n  // Eventos de teclado\n  document.body.addEventListener(\"keydown\", (e) => {\n    actors.forEach(\n      (actor) => actor.keyboardEvent && actor.keyboardEvent(e.key)\n    );\n  });\n  document.body.addEventListener(\"keyup\", (e) => {\n    actors.forEach(\n      (actor) => actor.keyboardEventUp && actor.keyboardEventUp(e.key)\n    );\n  });\n};\n"]}